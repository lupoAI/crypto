# from binance.spot import Spot as Client
# from binance.websocket.spot.websocket_client import SpotWebsocketClient as WebsocketClient
#
# client = Client(base_url='https://testnet.binance.vision')
# print(client.time())
#
# ws_client = WebsocketClient(stream_url='wss://testnet.binance.vision')
#
# order_types = {"LIMIT",
#                "MARKET",
#                "STOP_LOSS",
#                "STOP_LOSS_LIMIT",
#                "TAKE_PROFIT",
#                "TAKE_PROFIT_LIMIT",
#                "LIMIT_MAKER"}
#
# parameters = {"symbol": "BTCUSDT",
#               "side": "",
#               "type": "",
#               "timeInForce": "",
#               "quantity": 0,
#               "quoteOrderQty": 0,
#               "price": 0,
#               "newClientOrderId": "",
#               "stopPrice": 0,
#               "icebergQty": 0,
#               "newOrderRespType": "",
#               "recvWindow": "",
#               "timestamp": 0}


import logging
from binance.spot import Spot as Client
from binance.lib.utils import config_logging
from binance.error import ClientError

import json

config_logging(logging, logging.DEBUG)

with open('../config.json') as config_file:
    config = json.load(config_file)

key = config['test_api_key']
secret = config['test_secret_key']

params = {
    "symbol": "BTCUSDT",
    "side": "SELL",
    "type": "LIMIT",
    "timeInForce": "GTC",
    "quantity": 0.002,
    "price": "60000",
}

client = Client(key, secret, base_url="https://testnet.binance.vision")

try:
    response = client.new_order_test(**params)
    logging.info(response)
except ClientError as error:
    logging.error(
        "Found error. status: {}, error code: {}, error message: {}".format(
            error.status_code, error.error_code, error.error_message
        )
    )

try:
    response = client.new_order(**params)
    logging.info(response)
except ClientError as error:
    logging.error(
        "Found error. status: {}, error code: {}, error message: {}".format(
            error.status_code, error.error_code, error.error_message
        )
    )